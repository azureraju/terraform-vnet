# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

stages:
  - stage: TerraformValidateStage
    jobs:
      - job: TerraformValidateJob
        displayName: TerraformValidateJob
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            inputs:
              terraformVersion: 'latest'
          
          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)terraform-vnet'
              backendServiceArm: 'Pay-As-You-Go(e58b54d7-2056-4c1d-88fd-c6b1bb1a406d)'
              backendAzureRmResourceGroupName: 'rgp-strg-stmanagemnt'
              backendAzureRmStorageAccountName: 'stargstmanagment'
              backendAzureRmContainerName: 'contarnerst'
              backendAzureRmKey: 'contarnerst.tfstate'

          - task: TerraformTask@5
            inputs:
              provider: 'azurerm'
              command: 'validate'
              workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-vnet'

          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: '$(Pipeline.Workspace)/terraform-vnet'
              artifact: 'terraform-vnet-out'
              publishLocation: 'pipeline'